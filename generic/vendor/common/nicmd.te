# Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of Qualcomm Innovation Center, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

type vendor_nicmd, domain;
type vendor_nicmd_exec, exec_type, vendor_file_type, file_type;

net_domain(vendor_nicmd)
init_daemon_domain(vendor_nicmd)

allow vendor_nicmd vendor_nicmd_socket:dir w_dir_perms;
allow vendor_nicmd vendor_nicmd_socket:sock_file create_file_perms;
allow vendor_nicmd self:netlink_xfrm_socket { create_socket_perms_no_ioctl nlmsg_write nlmsg_read };
allow vendor_nicmd self:netlink_generic_socket create_socket_perms_no_ioctl;
allow vendor_nicmd self:netlink_route_socket nlmsg_write;
allow vendor_nicmd self:netlink_socket create_socket_perms_no_ioctl;
allow vendor_nicmd self:socket create_socket_perms;
allow vendor_nicmd self:qipcrtr_socket create_socket_perms_no_ioctl;
allow vendor_nicmd self:tipc_socket { listen accept create_socket_perms_no_ioctl };
allowxperm vendor_nicmd self:socket ioctl msm_sock_ipc_ioctls;
allowxperm vendor_nicmd self:udp_socket ioctl priv_sock_ioctls;
allowxperm vendor_nicmd self:udp_socket ioctl rmnet_sock_ioctls;

#Allow connections to qmipriod
unix_socket_connect(vendor_nicmd, vendor_nicmd, vendor_qmipriod);

allow vendor_nicmd sysfs_net:dir r_dir_perms;
allow vendor_nicmd sysfs_net:file rw_file_perms;
allow vendor_nicmd vendor_sysfs_data:file r_file_perms;

wakelock_use(vendor_nicmd)

#Allow netutils usage
domain_auto_trans(vendor_nicmd, netutils_wrapper_exec, netutils_wrapper)

use_netutils(vendor_nicmd)

#Allow diag logging
userdebug_or_eng(`
  r_dir_file(vendor_nicmd, vendor_sysfs_diag)
')

#Ignore if device loading for private IOCTL failed
dontaudit vendor_nicmd kernel:system { module_request };

allow vendor_nicmd proc_net:file rw_file_perms;
allow vendor_nicmd vendor_nicm_data_file:dir rw_dir_perms;
allow vendor_nicmd vendor_nicm_data_file:file create_file_perms;

allow vendor_nicmd netutils_wrapper:process sigkill;
allow vendor_nicmd system_net_netd_hwservice:hwservice_manager find;
get_prop(vendor_nicmd, hwservicemanager_prop)
hwbinder_use(vendor_nicmd)

allow vendor_nicmd self:capability { net_admin net_raw setgid setpcap setuid kill };

# Allow nicmd to search, connect, and write to shsc socket
use_shsusrd_socket(vendor_nicmd)

# Allow vendor_nicmd to set vendor properties
set_prop(vendor_nicmd, vendor_data_ko_prop)

# Allow nicmd to use shsusrd properties
set_prop(vendor_nicmd, vendor_data_shsusr_prop)
set_prop(vendor_nicmd, vendor_data_qmipriod_prop)

# Allow Netd AIDL access
binder_call(vendor_nicmd, netd)
binder_call(vendor_nicmd, servicemanager)
allow vendor_nicmd system_net_netd_service:service_manager find;

hal_client_domain(vendor_nicmd, vendor_hal_perf);

# Allow nicmd to search, connect, and write to shsc socket
use_shsusrd_socket(vendor_nicmd)

# Allow nicmd to use the connectivity_native library
get_prop(vendor_nicmd, boot_status_prop)
allow vendor_nicmd connectivity_native_service:service_manager find;
binder_call(vendor_nicmd, connectivity_native_service)
binder_call(vendor_nicmd, system_server)
